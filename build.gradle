plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.1.24"
    id 'me.gravityio.replacementplugin' version "0.0.7"
    id "me.gravityio.discord-webhook" version "0.0.2"
}

def changelog = "- Fixed an issue with Essential mod, and possibly with many others (Removed MixinExtras dependency)"
def mcVersions = ["1.21"]
def secrets = new Properties()

rootProject.file('secrets.properties').withInputStream { secrets.load(it) }
rootProject.ext.sharedData = [:]

version = "$rootProject.mod_version+$stonecutter.current.version"
group = "me.gravityio"

loom {
    runConfigs.all {
        ideConfigGenerated(true) // Run configurations are not created for subprojects by default
        runDir = "../../run" // Use a shared run folder and just create separate worlds
    }
}

if (stonecutter.current.isActive) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
    }
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"],
            "inventory_tabs": ["https://modrinth.com/mod/inventory-tabs", "https://www.curseforge.com/minecraft/mc-mods/inventory-tabs-updated"]
    ]
}

sendDiscordWebhook.dependsOn("publishCurseForge", "modrinth")
discordWebhook {
    def modrinthURL = "https://modrinth.com/mod/easyrename/version/${rootProject.mod_version}"
    def curseURL = "https://www.curseforge.com/minecraft/mc-mods/easyrename/files/${rootProject.ext.sharedData.curseFileId}"
    def githubURL = "https://github.com/GravityCY/EasyRename/issues"

    webhook_url = secrets.get("discord_webhook_url") as String
    content = "# ${rootProject.mod_name} ${rootProject.mod_version} Update\n" + changelog + "\n\n[Modrinth](<${modrinthURL}>) | [Curseforge](<${curseURL}>)\n[GitHub](<${githubURL}>)"
}

tasks.register("publishMod") {
    group = "publishing"

    dependsOn "sendDiscordWebhook"
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD");

    def mainFile = upload(1027188, remapJar)
    mainFile.addEnvironment("Client", "Server")
    mainFile.changelog = changelog
    mcVersions.each {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = "Easy Rename ${mod_version}"
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 21")
    mainFile.addRequirement("fabric-api")
    mainFile.addRequirement("yacl")
    mainFile.addOptional("modmenu")

    project.ext.sharedData.curseFileId = mainFile.curseFileId
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = "easyrename"
    versionName = "Easy Rename $mod_version"
    versionNumber = mod_version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

project.dependencies.add("minecraft", "com.mojang:minecraft:${stonecutter.current.version}")
project.dependencies.add("mappings", loom.officialMojangMappings())
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${rootProject.loader_version}")

repositories {
    // YACL
    maven {
        name "Xander Maven"
        url 'https://maven.isxander.dev/releases'
    }
    // Dependency of YACL
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    // Mod Menu
    maven { url "https://maven.terraformersmc.com/releases" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    modImplementation("dev.isxander:yet-another-config-lib:$project.yacl_version-fabric")
    modImplementation("com.terraformersmc:modmenu:$project.modmenu_version")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

base {
    archivesName = project.mod_id
}

processResources  {
    def modProperties = [
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_version": rootProject.mod_version,
            "mod_description": rootProject.mod_description,
            "mod_author": rootProject.mod_author,
            "mod_sources": rootProject.mod_sources,
            "mod_license": rootProject.mod_license,
            "loader_version": rootProject.loader_version,

            "minecraft_version_range": project.minecraft_version_range,
            "yacl_version": project.yacl_version,
            "fabric_version": project.fabric_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {}
}