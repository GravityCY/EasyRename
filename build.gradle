plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.1.24"
    id 'me.gravityio.replacementplugin' version "0.0.7"
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"],
            "inventory_tabs": ["https://modrinth.com/mod/inventory-tabs", "https://www.curseforge.com/minecraft/mc-mods/inventory-tabs-updated"]
    ]
}

def changelog = "- Fixed a bug with some mods adding special screens"
def mcVersions = ["1.20.5", "1.20.6"]

version = project.mod_version
group = "me.gravityio"

loom {
    accessWidenerPath = file("src/main/resources/easyrename.accesswidener")
}

tasks.register("publishMod") {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD");

    def mainFile = upload(1027188, remapJar)
    mainFile.addEnvironment("Client", "Server")
    mainFile.changelog = changelog
    mcVersions.each {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = "Easy Rename ${mod_version}"
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 21")
    mainFile.addRequirement("fabric-api")
    mainFile.addRequirement("yacl")
    mainFile.addOptional("modmenu")
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = "easyrename"
    versionName = "Easy Rename $mod_version"
    versionNumber = mod_version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

project.dependencies.add("minecraft", "com.mojang:minecraft:${project.minecraft_version}")
project.dependencies.add("mappings", "net.fabricmc:yarn:${project.project.yarn_mappings}:v2")
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${project.loader_version}")

repositories {
    // Mixin Extras
    maven { url 'https://jitpack.io' }
    // YACL
    maven {
        name "Xander Maven"
        url 'https://maven.isxander.dev/releases'
    }
    // Dependency of YACL
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    // Mod Menu
    maven { url "https://maven.terraformersmc.com/releases" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_version"
    modImplementation "dev.isxander:yet-another-config-lib:$project.yacl_version-fabric"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    include("com.github.LlamaLad7:MixinExtras:0.1.1")
}

base {
    archivesName = project.mod_id
}

processResources  {
    def modProperties = [
            "mod_id": project.mod_id,
            "mod_name": project.mod_name,
            "mod_version": project.mod_version,
            "mod_description": project.mod_description,
            "mod_author": project.mod_author,
            "mod_sources": project.mod_sources,
            "mod_license": project.mod_license,
            "loader_version": project.loader_version,
            "minecraft_version": project.minecraft_version,
            "yacl_version": project.yacl_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {}
}